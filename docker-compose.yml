# docker-compose.yml
version: '3.8'

services:
  # 1. Serviço do RabbitMQ (Sistema de Mensageria)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"   # Porta padrão do AMQP para os apps
      - "15672:15672"  # Porta da interface de gerenciamento web
    networks:
      - app_net

  # 2. Serviço da Aplicação Principal (FastAPI)
  fastapi_app:
    build: ./app  # Constrói a imagem a partir do Dockerfile na pasta 'app'
    container_name: 'fastapi_app'
    ports:
      - "8000:8000" # Expõe a porta 8000 do container para o host
    volumes:
      - ./app:/code # Monta o diretório 'app' local dentro do '/code' no container
                    # (permite live-reload)
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - rabbitmq # Garante que o RabbitMQ inicie antes do FastAPI
    environment:
      - RABBITMQ_HOST=rabbitmq # Passa o nome do host do RabbitMQ via variável de ambiente
    networks:
      - app_net

  # 3. Serviço do Consumidor
  consumer:
    build: ./app # Reutiliza a mesma imagem construída para o FastAPI
    container_name: 'consumer'
    command: python consumer.py # Sobrescreve o comando para rodar o consumidor
    depends_on:
      - rabbitmq # Também depende do RabbitMQ
    volumes:
      - ./app:/code # Monta os volumes para ver atualizações de código
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app_net
    restart: on-failure # Reinicia o consumidor se ele falhar (ex: se o RabbitMQ demorar para iniciar)

# Define a rede compartilhada
networks:
  app_net:
    driver: bridge